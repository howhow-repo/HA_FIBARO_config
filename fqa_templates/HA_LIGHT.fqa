{"name": "HA_LIGHT", "type": "com.fibaro.binarySwitch", "apiVersion": "1.2", "initialProperties": {"viewLayout": {"$jason": {"body": {"header": {"style": {"height": "0"}, "title": "quickApp_device_254"}, "sections": {"items": [{"components": [{"name": "debug", "style": {"weight": "1.2"}, "text": "debug", "type": "button", "visible": true}, {"style": {"weight": "0.5"}, "type": "space"}], "style": {"weight": "1.2"}, "type": "vertical"}]}}, "head": {"title": "quickApp_device_254"}}}, "uiCallbacks": [{"callback": "sync_stat", "eventType": "onReleased", "name": "debug"}], "quickAppVariables": [{"name": "ip", "type": "string", "value": "192.168.70.155"}, {"name": "port", "type": "string", "value": "8123"}, {"name": "entity_id", "type": "string", "value": "light.window_side"}, {"name": "HA_AUTH_TOKEN", "type": "string", "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI2ODU1NWM4OWQzMjE0MmEzYjY5ODZjNjY1OWFlYTE5NyIsImlhdCI6MTYzNjUxNjkwNCwiZXhwIjoxOTUxODc2OTA0fQ.HRrGPMZUjeRK3YQRmaPNulqvvqsP2NaDZMPYaiBc7wo"}], "typeTemplateInitialized": true}, "files": [{"name": "main", "isMain": true, "isOpen": false, "content": "-- Binary switch type should handle actions turnOn, turnOff\n-- To update binary switch state, update property \"value\" with boolean\n\nfunction QuickApp:turnOn()\n    self:debug(\"binary switch turned on\")\n    self:doAction(\"turn_on\", function() self:updateProperty(\"value\", true) end)\n    \nend\n\nfunction QuickApp:turnOff()\n    self:debug(\"binary switch turned off\")\n    self:doAction(\"turn_off\", function() self:updateProperty(\"value\", false) end)\nend\n\nfunction QuickApp:sync_stat()\n    self:getStat()\nend\n\n-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\n-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). \n-- Here you can set some default values, setup http connection or get QuickApp variables.\n-- To learn more, please visit: \n--    * https://manuals.fibaro.com/home-center-3/\n--    * https://manuals.fibaro.com/home-center-3-quick-apps/\n\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n    self.http = net.HTTPClient({timeout=3000})\n    self.ip = self:getVariable(\"ip\")\n    self.port = self:getVariable(\"port\")\n    self.entity_id = self:getVariable(\"entity_id\")\n    self.access_token = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI1MWQxNjRlMjgxZmM0NjcwOTFkZjhhNzI3YjdjZDdiNyIsImlhdCI6MTYzNjA5MTEyNSwiZXhwIjoxOTUxNDUxMTI1fQ.rCUU7Dpk57f-Ck6Zxyvo-G2Vk7qoSkNegX53kl-8IQc\"\n    \nend\n"}, {"name": "action", "isMain": false, "isOpen": true, "content": "function QuickApp:doAction(action, successCallback, attr)\n    local address = \"http://\"..self.ip..\":\"..self.port..\"/api/services/light/\"..action\n    local requestBody = self:addAttr(attr)\n    self:debug(address)\n    self:debug(json.encode(requestBody))\n\n    self.http:request(address, {\n        options = {\n            data = json.encode(requestBody),\n            method = \"POST\",\n            headers = { \n                [\"Content-Type\"] = \"application/json\",\n                -- [\"Accept\"] = \"*/*\",\n                [\"Authorization\"] = \"Bearer \"..self.access_token\n            },\n        },\n        success = function(response) \n            self:debug(response.status)\n            self:debug(response.data)\n            successCallback()\n        end,\n        error = function(message)\n            self:debug(\"error:\", message)\n        end\n    })\n\nend\n\nfunction QuickApp:addAttr(attr)\n    local requestBody = {\n        entity_id = self.entity_id,\n    }\n    if attr == nil then\n        return requestBody\n    else\n        attr = json.decode(attr)\n        for k,v in pairs(attr) do requestBody[k] = v end\n        return requestBody\n    end\nend"}, {"name": "sync", "isMain": false, "isOpen": false, "content": "function QuickApp:getStat()\n    local address = \"http://\"..self.ip..\":\"..self.port..\"/api/states/\"..self.entity_id\n    self.http:request(address, {\n        options={\n            headers = { \n                [\"Content-Type\"] = \"application/json\",\n                -- [\"Accept\"] = \"*/*\",\n                [\"Authorization\"] = \"Bearer \"..self.access_token\n            },\n            checkCertificate = true,\n            method = 'GET'\n        },\n        success = function(response)\n            self:debug(\"response status:\", response.status) \n            self:debug(\"headers:\", response.headers[\"Content-Type\"]) \n            self:debug(response.data)\n            local data = json.decode(response.data)\n            self:updateStat(data)\n        end,\n        error = function(error)\n            self:debug('error: ' .. json.encode(error))\n        end\n    })\nend\n\nfunction QuickApp:updateStat(resp)\n    self:debug(resp)\n    self:debug(type(resp))\nend"}]}